[{"path":"https://retostauffer.github.io/gsdata/articles/metadata.html","id":"station-information","dir":"Articles","previous_headings":"","what":"Station information","title":"Datasets","text":"Element stations object class c(“sf”, “data.frame”) containing information available stations data set. includes name station, geographical location (state, altitude, coordinates) well station id required retrieving data (see gs_stationdata()). addition, object provides information time period data available (valid_from, valid_to) whether station is_active.","code":"plot(meta$station[\"altitude\"],      main = \"Station location and altitude\",      pch = 19, cex = 1) plot(meta$station[\"is_active\"],      main = \"Station status (active/inactive)\",      col = ifelse(meta$station$is_active, \"#089392\", \"#CF597E\"),      pch = ifelse(meta$station$is_active, 19, 17),      cex = 1)"},{"path":"https://retostauffer.github.io/gsdata/articles/metadata.html","id":"parameter-information","dir":"Articles","previous_headings":"","what":"Parameter information","title":"Datasets","text":"Element parameters provides list available parameters data set. Alongside name required retrieve data (see gs_stationdata()) data.frame also contains description well unit measurements. , however, available German. Please note stations provide measurements parameters.","code":"head(meta$parameters, n = 3) ##   name                              long_name ## 1   C1   Wolkenart der tiefsten Wolkenschicht ## 2   C2 Wolkenart der 2.tiefsten Wolkenschicht ## 3   C3 Wolkenart der 3.tiefsten Wolkenschicht ##                                                                    desc ## 1   Wolkenart bzw. Gattung der tiefsten Wolkenschicht (Code Table 0500) ## 2 Wolkenart bzw. Gattung der 2.tiefsten Wolkenschicht (Code Table 0500) ## 3 Wolkenart bzw. Gattung der 3.tiefsten Wolkenschicht (Code Table 0500) ##           unit ## 1 Code (Synop) ## 2 Code (Synop) ## 3 Code (Synop)"},{"path":[]},{"path":"https://retostauffer.github.io/gsdata/articles/stationdata.html","id":"synop-1-station-3-parameters","dir":"Articles","previous_headings":"Hourly synop observations","what":"Synop, 1 station, 3 parameters","title":"Datasets","text":"Dataset: historical hourly synop observations Ten consecutive days 2020 Parameters: three parameters Stations: single station, 11330 Mayrhofen  expert = TRUE (default) function internally download meta information calling gs_metadata() check arguments provided station_ids parameters valid (.e., station parameters valid specific data set). can disabled using expert = FALSE prevents internal checks save time - may result API request errors station(s) parameter(s) exist. One can, course, get meta information station parameters needed (see gs_metdatata() details):","code":"mayrhofen <- gs_stationdata(mode        = \"historical\",                             resource_id = \"synop-v1-1h\",                             start       = \"2022-01-01\",                             end         = \"2022-01-11\",                             parameters  = c(\"T\", \"Td\", \"ff\"),                             station_ids = 11330)  # zoo object head(mayrhofen) ##                        T   Td ff ## 2022-01-01 00:00:00 -0.8 -1.4  1 ## 2022-01-01 01:00:00 -0.7 -1.1  1 ## 2022-01-01 02:00:00 -0.9 -1.5  0 ## 2022-01-01 03:00:00 -1.5 -1.8  0 ## 2022-01-01 04:00:00 -2.0 -2.3  0 ## 2022-01-01 05:00:00 -2.2 -2.5  1 # simple zoo plot plot(mayrhofen,      screen = c(1, 1, 2),      col    = c(2, 3, 4),      ylab   = c(\"air temperature [C]\\nwelt bulb temperature [C]\",                 \"mean wind speed [m/s]\")) meta <- gs_metadata(mode = \"historical\", resource_id = \"synop-v1-1h\") subset(meta$stations, id == 11330) ## Simple feature collection with 1 feature and 11 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 11.85167 ymin: 47.1625 xmax: 11.85167 ymax: 47.1625 ## Geodetic CRS:  WGS 84 ##         type    id group_id      name state altitude valid_from   valid_to ## 1 INDIVIDUAL 11330       NA MAYRHOFEN Tirol      640 2007-08-28 2100-01-01 ##   has_sunshine has_global_radiation is_active                 geometry ## 1           NA                   NA      TRUE POINT (11.85167 47.1625) subset(meta$parameters, name %in% c(\"T\", \"Td\", \"ff\")) ##    name           long_name ## 39    T      Lufttemperatur ## 40   Td  Taupunkttemperatur ## 57   ff Windgeschwindigkeit ##                                                                      desc unit ## 39                                                         Lufttemperatur   °C ## 40                       Taupunkt (bis 2001/06/19 tw. mit rel beschickt!)   °C ## 57 Windgeschwindigkeit in 1/10 m/s (wird umgerechnet, wenn Knoten: *5.14)  m/s"},{"path":"https://retostauffer.github.io/gsdata/articles/stationdata.html","id":"synop-multiple-stations-all-parameters","dir":"Articles","previous_headings":"Hourly synop observations > Synop, 1 station, 3 parameters","what":"Synop, multiple stations, all parameters","title":"Datasets","text":"Dataset: historical hourly synop observations Ten consecutive days 2020 Parameters: available parameters (uses parameters = NULL; default) Stations: three different stations function allows retrieve data multiple stations download avialable parameters specifying parameters (uses parameters = NULL). return avialable data stations named list, names elements correspond station id. expert = TRUE skips internal check whether station_ids given valid (.e., even exist data set). Note station 11328 provide data time period specified resulting warning return missing value (NA). two elements list contain objects class c(“gs_stationdata”, “zoo”): API, however, provides different data two stations two stations provide data parameters. Parameters providing data included return.","code":"x <- gs_stationdata(mode        = \"historical\",                     resource_id = \"synop-v1-1h\",                     start       = \"2020-01-01\",                     end         = \"2020-01-11\",                     station_ids = c(11330, 11328, 11120),                     expert      = TRUE) ## Warning in gs_stationdata(mode = \"historical\", resource_id = \"synop-v1-1h\", : ## no observations available for station 11328; returning NA class(x) ## [1] \"list\" names(x) ## [1] \"11330\" \"11328\" \"11120\" x[[\"11328\"]] ## [1] NA is.na(x[[\"11328\"]]) ## [1] TRUE lapply(x[c(\"11330\", \"11120\")], class) ## $`11330` ## [1] \"gs_stationdata\" \"zoo\"            ##  ## $`11120` ## [1] \"gs_stationdata\" \"zoo\" lapply(x[c(\"11330\", \"11120\")], head, n = 2) ## $`11330` ##                     Ir Iw Ix    Pg     Pp RR3 RRR    T   Td Tg Tmax Tmin W1 W2 ## 2020-01-01 00:00:00  3  1  6 958.0 1037.5  NA  -1 -1.1 -1.8 NA   NA   NA NA NA ## 2020-01-01 01:00:00  3  1  6 958.1 1037.7  NA  -1 -1.3 -2.0 NA   NA   NA NA NA ##                     a   datumsec dd einspielzeit ff flag_rst gruen   p qflag ## 2020-01-01 00:00:00 8 1577836800 NA   1577836916  1        0     0 0.7     0 ## 2020-01-01 01:00:00 5 1577840400  0   1577840534  0        0     0 1.1     0 ##                     rot schwarz sonne tr tr3 ww ## 2020-01-01 00:00:00   0       0    NA  1  NA NA ## 2020-01-01 01:00:00   0       0    NA NA  NA NA ##  ## $`11120` ##                     C1 C2 Ir Iw Ix N Ns1 Ns2 Ns3    Pg     Pp RR3 RRR    T   Td ## 2020-01-01 00:00:00 NA NA  3  1  4 3   3  NA  NA 964.0 1038.4  NA  -1 -3.4 -4.0 ## 2020-01-01 01:00:00 NA NA  3  1  4 6   1   6  NA 963.8 1038.1  NA  -1 -3.0 -3.4 ##                     Tg Tmax Tmin VV a boe   datumsec dd einspielzeit ff ## 2020-01-01 00:00:00 NA   NA   NA  5 4  NA 1577836800 NA   1577836219  1 ## 2020-01-01 01:00:00 NA   NA   NA  5 5  NA 1577840400 NA   1577839821  1 ##                     flag_rst gruen h hs1 hs2 hs3   p qflag rot schwarz sonnetag ## 2020-01-01 00:00:00        0     0 2   5  NA  NA 0.0     0   0       0      5.1 ## 2020-01-01 01:00:00        0     0 1   1   4  NA 0.6     0   0       0       NA ##                     sp1 sp2 sp3 tr tr3 w1boe w1ffmax ww ## 2020-01-01 00:00:00  NA  NA  NA NA  NA    NA      NA 49 ## 2020-01-01 01:00:00  NA  NA  NA NA  NA    NA      NA 49 lapply(x[c(\"11330\", \"11120\")], dim) ## $`11330` ## [1] 241  29 ##  ## $`11120` ## [1] 241  44 # Default plots plot(x[[\"11330\"]], nc = 3, col = \"steelblue\", type = \"o\", pch = 4) plot(x[[\"11120\"]], nc = 3, col = \"steelblue\", type = \"o\", pch = 4)"},{"path":"https://retostauffer.github.io/gsdata/articles/stationdata.html","id":"tawes-data","dir":"Articles","previous_headings":"","what":"TAWES data","title":"Datasets","text":"TAWES stands “teilautomatische Wetterstation” provides data 10 minute temporal resolution. Requesting data TAWES stations works way synop stations shown , however, set avialble stations parameters different (names parameters differ). get information available stations parameters call: … check vignette Metadata information return.","code":"meta <- gs_metadata(\"historical\", \"tawes-v1-10min\")"},{"path":[]},{"path":"https://retostauffer.github.io/gsdata/articles/stationdata.html","id":"daily-climate-records-1-station-3-parameters","dir":"Articles","previous_headings":"Klima","what":"Daily climate records, 1 station, 3 parameters","title":"Datasets","text":"Dataset: historical climate recoreds; daily temporal resolution Summer 2020 till end 2022 (2.5 years) Parameters: three distinct parameters (precipitation snow height) Stations: single station, 8807 Achenkirch","code":"meta <- gs_metadata(\"historical\", \"klima-v1-1d\") achenkirch <- gs_stationdata(mode        = \"historical\",                              resource_id = \"klima-v1-1d\",                              start       = \"2020-06-01\",                              end         = \"2022-12-31\",                              parameters  = c(\"nied\", \"nied07\", \"schnee\"),                              station_ids = 8807,                              expert      = TRUE) head(achenkirch) ##            nied nied07 schnee ## 2020-06-01 -1.0     NA     -1 ## 2020-06-02 -1.0   -1.0     -1 ## 2020-06-03  4.2   -1.0     -1 ## 2020-06-04  8.2    4.2     -1 ## 2020-06-05  0.1    8.2     -1 ## 2020-06-06  6.7    0.1     -1 plot(achenkirch, type = \"h\")"},{"path":"https://retostauffer.github.io/gsdata/articles/stationdata.html","id":"min-climate-records-1-station-3-parameters","dir":"Articles","previous_headings":"Klima","what":"10min climate records, 1 station, 3 parameters","title":"Datasets","text":"Dataset: historical climate recoreds; daily temporal resolution Summer 2020 till end 2022 (2.5 years) Parameters: three distinct parameters (precipitation snow height) Stations: single station, 8807 Achenkirch","code":"meta <- gs_metadata(\"historical\", \"klima-v1-10min\") uibk <-  gs_stationdata(mode        = \"historical\",                         resource_id = \"klima-v1-10min\",                         start       = \"2010-11-01\",                         end         = \"2011-02-01\",                         parameters  = c(\"TL\", \"FFAM\", \"FFX\"),                         station_ids = 11803,                         expert      = TRUE) plot(uibk,      screens = c(1, 2, 2),      col = c(2, 4, 8),      ylab = c(\"temperature\", \"mean wind\\nand gusts\"))"},{"path":"https://retostauffer.github.io/gsdata/articles/stationdata.html","id":"tawes-1-station-4","dir":"Articles","previous_headings":"Klima","what":"TAWES, 1 station, 4","title":"Datasets","text":"Dataset: historical TAWES observations, 10min temporal resolution January 2023 (31 consecutive days) Parameters: four predefined parameters Stations: single station, 11121 Innsbruck Airport WARNING: resource_id = \"tawes-v1-10min\" qualiy controlled seems provide limited amount data (going far back time). Consider using resource_id = \"klima-v1-10min\" instead (see ) provides long-term historical quality-controlled data. Station IDs (available parameters) differ, tough.","code":"uibk <-  gs_stationdata(mode        = \"historical\",                         resource_id = \"tawes-v1-10min\",                         start       = \"2023-01-01\",                         end         = \"2023-02-01\",                         parameters  = c(\"TL\", \"TP\", \"FFAM\", \"FFX\"),                         station_ids = 11121,                         expert      = TRUE) plot(uibk,      screens = c(1, 1, 2, 2),      col = c(2, 3, 4, 8),      ylab = c(\"temperature\\nand dewpoint\", \"mean wind\\nand gusts\"))"},{"path":[]},{"path":"https://retostauffer.github.io/gsdata/articles/stationdata.html","id":"histalp-annual-data-1-station-2-parameters","dir":"Articles","previous_headings":"Histalp","what":"Histalp annual data, 1 station, 2 parameters","title":"Datasets","text":"Dataset: historical histalp records; annual observations 1845 2022 Parameters: precipitation temperature (annual) Stations: single station, 23 Bregenz","code":"meta <- gs_metadata(\"historical\", \"histalp-v1-1y\") bregenz <- gs_stationdata(mode        = \"historical\",                           resource_id = \"histalp-v1-1y\",                           start       = \"1854-01-01\",                           end         = \"2022-01-01\",                           parameters  = c(\"R01\", \"T01\"),                           station_ids = 23,                           expert      = TRUE)  plot(bregenz, col = c(4, 2))"},{"path":"https://retostauffer.github.io/gsdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Reto Stauffer. Maintainer, author.","code":""},{"path":"https://retostauffer.github.io/gsdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stauffer R (2023). gsdata: Accessing Data Geosphere (ZAMG). R package version 0.0-3.","code":"@Manual{,   title = {gsdata: Accessing Data from Geosphere (ZAMG)},   author = {Reto Stauffer},   year = {2023},   note = {R package version 0.0-3}, }"},{"path":"https://retostauffer.github.io/gsdata/contact.html","id":null,"dir":"","previous_headings":"","what":"Contact","title":"Contact","text":"github issues","code":""},{"path":"https://retostauffer.github.io/gsdata/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Accessing Data from Geosphere (ZAMG)","text":"Interfacing Geosphere Austria Data Hub (formerly known ZAMG; Austrian national weather service). API provides series publicly available meteorological/climatological data sets. Currently, package allows download stationdata (gridded/spatial data).","code":""},{"path":"https://retostauffer.github.io/gsdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Accessing Data from Geosphere (ZAMG)","text":"package available via github. simplest way install use remotes follows: automatically resolve reverse dependencies. Note sf package may need additional libraries installed system (geos, proj4). details please read installation instructions https://r-spatial.github.io/sf/.","code":"library(\"remotes\") install_github(\"retostauffer/gsdata\")"},{"path":"https://retostauffer.github.io/gsdata/index.html","id":"dependencies","dir":"","previous_headings":"Installation","what":"Dependencies","title":"Accessing Data from Geosphere (ZAMG)","text":"package depends : httr: data requests zoo: time series data sf: spatial information parsedate: parsing dates","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_baseurl.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting API Base URL — gs_baseurl","title":"Getting API Base URL — gs_baseurl","text":"Just returns base URL API requests","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_baseurl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting API Base URL — gs_baseurl","text":"","code":"gs_baseurl(version = 1L)"},{"path":"https://retostauffer.github.io/gsdata/reference/gs_baseurl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting API Base URL — gs_baseurl","text":"version integer, defaults 1.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_baseurl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting API Base URL — gs_baseurl","text":"String, base URL API.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_baseurl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Getting API Base URL — gs_baseurl","text":"Reto Stauffer","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting Available Datasets — gs_datasets","title":"Getting Available Datasets — gs_datasets","text":"Geosphere (ZAMG) datahub API provides endpoint get available datasets. function returns (possibly pre-filtered) data.frame containing dataset type, mode resource_id needed perform data requests (see e.g., gs_stationdata()) amongst additional information.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting Available Datasets — gs_datasets","text":"","code":"gs_datasets(   type = \"station\",   mode = NULL,   version = 1L,   config = list(),   verbose = FALSE )"},{"path":"https://retostauffer.github.io/gsdata/reference/gs_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting Available Datasets — gs_datasets","text":"type NULL character length 1 filter request. mode NULL character length 1 filter request. Currently defaults mode = \"station\". version integer, API version (defaults 1). config empty list default; can named list fowrarded httr::GET request needed. verbose logical, set TRUE output produced.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting Available Datasets — gs_datasets","text":"Returns data.frame available data types API endpoints. type mode equal NULL data available via API returned. important information return type, mode, well resource_id used perform data requests.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Getting Available Datasets — gs_datasets","text":"API provides enpoint get available data sets can filtered using arguments type /mode. Classical usecase: Return data sets mode == \"historical\": gs_datasets(mode = \"historical\") Return data sets type == \"grid\": gs_datasets(type = \"grid\") Can combined (settinb type mode).","code":""},{"path":[]},{"path":"https://retostauffer.github.io/gsdata/reference/gs_datasets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Getting Available Datasets — gs_datasets","text":"Reto Stauffer","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloading Dataset Meta Data — gs_metadata","title":"Downloading Dataset Meta Data — gs_metadata","text":"Downloading Dataset Meta Data","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloading Dataset Meta Data — gs_metadata","text":"","code":"gs_metadata(   mode,   resource_id,   type = NULL,   version = 1L,   config = list(),   verbose = FALSE )"},{"path":"https://retostauffer.github.io/gsdata/reference/gs_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloading Dataset Meta Data — gs_metadata","text":"mode character, specify mode data. resource_id character, specify resource identifier data. type NULL character. required data set available one type (e.g., \\\"grid\\\" \\\"timeseries\\\"). version integer, API version (defaults 1L). config empty list default; can named list fowrarded httr::GET request needed. verbose logical, set TRUE output produced.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloading Dataset Meta Data — gs_metadata","text":"Named list series information dataset. importantly function returns information stations data available well parameters available. Note availability data depends station; meta information provides overview possibliy avialable. $stations: sf object (spatial feature data frame) containing information stations belonging dataset including geographical location, name, id (station identifier) wihch used retrieving data (see e.g., gs_stationdata()). $parameters: data.frame containing name parameters used retrieving data (see e.g., gs_stationdata()) well parameter description. available German, tough. addition, following information returned separate entries list: $title/$id_type: title/id type dataset $frequency: observation frequency/temporal interval (see also gs_temporal_interval()) $type: data type (e.g., \"station\") $mode: data set mode (e.g., \"historical\") $response_formats: formats API provides $start_time/$end_time: date/time range availability data set $url: URL; origin data set","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_metadata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Downloading Dataset Meta Data — gs_metadata","text":"Reto Stauffer","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloading Dataset Meta Data — gs_metadata","text":"","code":"## Loading meta information for data set with ## mode == \"historical\" and resource_id = \"tawes-v1-10min\" tawes <- gs_metadata(\"historical\", \"tawes-v1-10min\")  ## Uses partial matching, thus this short form can be used in case ## there is only one match (one specific data set). With verbose = TRUE ## a message will tell which meta data set will be requested. synop <-  gs_metadata(\"hist\", \"synop\", verbose = TRUE) #> Requesting data for mode = \"historical\" and resource_id = \"synop-v1-1h\" #> Calling: https://dataset.api.hub.zamg.ac.at/v1/station/historical/synop-v1-1h/metadata  ## generic sf plotting; variable 'altitude' plot(synop$stations[\"altitude\"], pch = 19, cex = 2)"},{"path":"https://retostauffer.github.io/gsdata/reference/gs_stationdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloading Station Data — gs_stationdata","title":"Downloading Station Data — gs_stationdata","text":"Accessing API endpoint v<version>/station, see https://dataset.api.hub.zamg.ac./v1/docs/quickstart.html.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_stationdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloading Station Data — gs_stationdata","text":"","code":"gs_stationdata(   mode,   resource_id,   parameters = NULL,   start,   end,   station_ids,   expert = FALSE,   version = 1L,   verbose = FALSE,   format = NULL,   limit = 5e+05,   config = list() )"},{"path":"https://retostauffer.github.io/gsdata/reference/gs_stationdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloading Station Data — gs_stationdata","text":"mode character, specify mode data. resource_id character, specify resource identifier data. parameters character vector define parameters process. start, end object class Date, POSIXt, character. case character non-ISO format format can used (see ). station_ids integer vector station IDs processed. expert logical, defaults FALSE. TRUE script check input arguments valid. May result unsuccessful requests increases speed gs_datasets() gs_metadata() evaluated. version integer, API version (defaults 1L). verbose logical, set TRUE output produced. format NULL (default) character string, used start/end characters specific (non ISO) format. limit integer, API data request limit. request sent user exceeds limit, request split batches automatically. config empty list default; can named list fowrarded httr::GET request needed.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_stationdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloading Station Data — gs_stationdata","text":"data one single station (length(station_ids) == 1) requested, zoo object returned data available. data available, NULL returned. multiple stations requested list zoo object (NULL data available) returned. name list corresponds station id requested.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_stationdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Downloading Station Data — gs_stationdata","text":"function convenience function downloading different sets station data ZAMG data hub (now Geosphere). API may change additional resources may added, details see https://dataset.api.hub.zamg.ac./v1/docs/daten.html#available-datasets. see available call gs_datasets(\"station\"). API limit number elements one request. calculation based number expecte elements (.e., number stations times number parameters times number time steps). function pre-calculate number expected elements split request batches along time dimension - needed. current limits see https://dataset.api.hub.zamg.ac./v1/docs/daten.html#limitationen-beim-datendownload.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_stationdata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Downloading Station Data — gs_stationdata","text":"Reto Stauffer","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_stationdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloading Station Data — gs_stationdata","text":"","code":"###################################################################### ## Example for synop data  ## Loading meta information meta <- gs_metadata(mode = \"historical\", resource_id = \"synop-v1-1h\") ## For station information check head(meta$stations) #> Simple feature collection with 6 features and 11 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 9.848611 ymin: 47.1625 xmax: 15.36694 ymax: 48.69083 #> Geodetic CRS:  WGS 84 #>         type    id group_id             name            state altitude #> 1 INDIVIDUAL 11330       NA        MAYRHOFEN            Tirol      640 #> 2 INDIVIDUAL 11328       NA       ACHENKIRCH            Tirol      904 #> 3 INDIVIDUAL 11375       NA           AFLENZ       Steiermark      783 #> 4 INDIVIDUAL 11157       NA AIGEN IM ENNSTAL       Steiermark      641 #> 5 INDIVIDUAL 11301       NA    ALBERSCHWENDE       Vorarlberg      715 #> 6 INDIVIDUAL 11019       NA      ALLENTSTEIG Niederösterreich      599 #>   valid_from   valid_to has_sunshine has_global_radiation is_active #> 1 2007-08-28 2100-01-01           NA                   NA      TRUE #> 2 1998-09-24 2016-10-04           NA                   NA     FALSE #> 3 1992-10-08 2100-01-01           NA                   NA      TRUE #> 4 1972-01-01 2100-01-01           NA                   NA      TRUE #> 5 1996-01-16 2100-01-01           NA                   NA      TRUE #> 6 1988-05-30 2100-01-01           NA                   NA      TRUE #>                    geometry #> 1  POINT (11.85167 47.1625) #> 2 POINT (11.70528 47.53222) #> 3 POINT (15.24083 47.54583) #> 4 POINT (14.13833 47.53278) #> 5  POINT (9.848611 47.4575) #> 6 POINT (15.36694 48.69083) ## For available parameters (for this mode/resource_id) check head(meta$parameters) #>   name                              long_name #> 1   C1   Wolkenart der tiefsten Wolkenschicht #> 2   C2 Wolkenart der 2.tiefsten Wolkenschicht #> 3   C3 Wolkenart der 3.tiefsten Wolkenschicht #> 4   C4 Wolkenart der 4.tiefsten Wolkenschicht #> 5   CH                   Art der hohen Wolken #> 6   CL                  Art der tiefen Wolken #>                                                                    desc #> 1   Wolkenart bzw. Gattung der tiefsten Wolkenschicht (Code Table 0500) #> 2 Wolkenart bzw. Gattung der 2.tiefsten Wolkenschicht (Code Table 0500) #> 3 Wolkenart bzw. Gattung der 3.tiefsten Wolkenschicht (Code Table 0500) #> 4 Wolkenart bzw. Gattung der 4.tiefsten Wolkenschicht (Code Table 0500) #> 5                   Gattung bzw. Art der hohen Wolken (Code Table 0509) #> 6                  Gattung bzw. Art der tiefen Wolken (Code Table 0513) #>           unit #> 1 Code (Synop) #> 2 Code (Synop) #> 3 Code (Synop) #> 4 Code (Synop) #> 5 Code (Synop) #> 6 Code (Synop)  ## Getting data over 48 hours for one single station ## Note: If expert = FALSE (default) gs_stationdata() ## will internally call gs_metadata() once more to check ## if the requested station_ids as well as the parameters ## exist for the data set specified (mode/resource_id). mayrhofen <- gs_stationdata(mode        = \"historical\",                             resource_id = \"synop-v1-1h\",                             start       = \"2020-01-01\",                             end         = \"2020-01-03\",                             parameters  = c(\"T\", \"Td\", \"ff\"),                             station_ids = 11330, verbose = TRUE) #> Estimated number of elements to be retrieved: 192 (1 x 3 x 48) #> Number of requests to be performed: 1 (limit set to 5e+05) #> Calling: https://dataset.api.hub.zamg.ac.at/v1/station/historical/synop-v1-1h?parameters=T,Td,ff&start=2020-01-01T00:00&end=2020-01-03T00:00&station_ids=11330  library(\"zoo\") plot(mayrhofen, screen = c(1, 1, 2), col = c(2, 3, 4))  ## Getting data over 48 hours for three stations simultanously ## Mayrhofen Tirol, Achenkirch Tirol (no data), and Innsbruck Airport Tirol x <- gs_stationdata(mode        = \"historical\",                     resource_id = \"synop-v1-1h\",                     start       = \"2020-01-01\",                     end         = \"2020-01-03\",                     parameters  = c(\"T\", \"Td\", \"ff\"),                     station_ids = c(11330, 11328, 11120),                     expert      = TRUE) #> Warning: no observations available for station 11328; returning NA plot(x[[\"11330\"]], screen = c(1, 1, 2), col = c(2, 3, 4))  is.null(x[[\"11328\"]]) #> [1] FALSE plot(x[[\"11120\"]], screen = c(1, 1, 2), col = c(2, 3, 4))    ###################################################################### ## Example for daily climatological records meta <- gs_metadata(\"historical\", \"klima-v1-1d\") achenkirch <- gs_stationdata(mode        = \"historical\",                              resource_id = \"klima-v1-1d\",                              start       = \"2020-06-01\",                              end         = \"2022-12-31\",                              parameters  = c(\"nied\", \"nied07\", \"nied19\", \"sonne\"),                              station_ids = 8807,                              expert      = TRUE) head(achenkirch) #>            nied nied07 nied19 #> 2020-06-01 -1.0     NA     -1 #> 2020-06-02 -1.0   -1.0     -1 #> 2020-06-03  4.2   -1.0     -1 #> 2020-06-04  8.2    4.2     -1 #> 2020-06-05  0.1    8.2     -1 #> 2020-06-06  6.7    0.1     -1 plot(achenkirch, type = \"h\")    ###################################################################### ## Example for 10min KLIMA data # meta$parameter contains available parameters, # meta$stations  available stations meta <- gs_metadata(\"historical\", \"klima-v1-10min\") uibk <-  gs_stationdata(mode        = \"historical\",                         resource_id = \"klima-v1-10min\",                         start       = \"2010-11-01\",                         end         = \"2011-02-01\",                         parameters  = c(\"TL\", \"FFAM\", \"FFX\"),                         station_ids = 11803,                         expert      = TRUE) plot(uibk,      screens = c(1, 2, 2),      col = c(2, 4, 8),      ylab = c(\"temperature\", \"mean wind\\nand gusts\"))    ###################################################################### ## Example for 10min TAWES data ## NOTE/WARNING: ##   ! \"tawes\" is not quality controlled and provides limited ##   ! amount of data. Consider to use the \"klima-v1-10min\" data set which ##   ! provides long-term historical data for the same stations with the ##   ! same temporal resolution, however, the station IDs and ##   ! parameter names (as well as avilavle parameters) will differ ##   ! (check meta data). # meta$parameter contains available parameters, # meta$stations  available stations meta <- gs_metadata(\"historical\", \"tawes-v1-10min\") uibk <- gs_stationdata(mode         = \"historical\",                        resource_id  = \"tawes-v1-10min\",                        start        = Sys.Date() - 30,                        end          = Sys.Date(),                        parameters   = c(\"TL\", \"TP\", \"FFAM\", \"FFX\"),                        station_ids  = 11320,                        expert       = TRUE) plot(uibk,      screens = c(1, 1, 2, 2),      col = c(2, 3, 4, 8),      ylab = c(\"temperature\\nand dewpoint\", \"mean wind\\nand gusts\"))    ###################################################################### ## Example for annual histalp data gs_metadata(\"historical\", \"histalp-v1-1y\") #> $title #> [1] \"HISTALP\" #>  #> $parameters #>   name          long_name        desc unit #> 1  R01 Niederschlagssumme description   mm #> 2  T01   Temperaturmittel description   °C #>  #> $frequency #> [1] \"1YS\" #>  #> $type #> [1] \"station\" #>  #> $mode #> [1] \"historical\" #>  #> $response_formats #> $response_formats[[1]] #> [1] \"geojson\" #>  #> $response_formats[[2]] #> [1] \"csv\" #>  #>  #> $start_time #> [1] \"1753-01-01T00:00+00:00\" #>  #> $end_time #> [1] \"2022-01-01T00:00+00:00\" #>  #> $stations #> Simple feature collection with 91 features and 11 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 0 xmax: 16.7481 ymax: 48.754 #> Geodetic CRS:  WGS 84 #> First 10 features: #>          type id group_id             name state altitude valid_from   valid_to #> 1  INDIVIDUAL  1       NA           Admont    NA      646 1853-01-01 2022-12-01 #> 2  INDIVIDUAL  9       NA     Bad Bleiberg    NA      907 1874-01-01 2022-12-01 #> 3  INDIVIDUAL 10       NA      Bad Gastein    NA     1092 1854-01-01 2022-12-01 #> 4  INDIVIDUAL 11       NA Bad Gleichenberg    NA      280 1861-01-01 2022-12-01 #> 5  INDIVIDUAL 12       NA        Bad Ischl    NA      512 1855-01-01 2022-12-01 #> 6  INDIVIDUAL 23       NA          Bregenz    NA      424 1853-06-01 2022-12-01 #> 7  INDIVIDUAL 25       NA        Bruck/Mur    NA      482 1875-01-01 2022-12-01 #> 8  INDIVIDUAL 36       NA Deutschlandsberg    NA      354 1893-11-01 2022-12-01 #> 9  INDIVIDUAL 42       NA        Feldkirch    NA      440 1875-06-01 2022-12-01 #> 10 INDIVIDUAL 44       NA       Feuerkogel    NA     1618 1930-01-01 2022-12-01 #>    has_sunshine has_global_radiation is_active                geometry #> 1            NA                   NA     FALSE   POINT (14.457 47.572) #> 2            NA                   NA     FALSE   POINT (13.689 46.625) #> 3            NA                   NA     FALSE POINT (13.1333 47.1106) #> 4            NA                   NA     FALSE   POINT (15.907 46.879) #> 5            NA                   NA     FALSE    POINT (13.65 47.707) #> 6            NA                   NA     FALSE      POINT (9.735 47.5) #> 7            NA                   NA     FALSE    POINT (15.25 47.405) #> 8            NA                   NA     FALSE   POINT (15.229 46.822) #> 9            NA                   NA     FALSE  POINT (9.6086 47.2697) #> 10           NA                   NA     FALSE   POINT (13.718 47.818) #>  #> $id_type #> [1] \"Synop\" #>  #> $url #> [1] \"https://dataset.api.hub.zamg.ac.at/v1/station/historical/histalp-v1-1y/metadata\" #>  bregenz <- gs_stationdata(mode        = \"historical\",                           resource_id = \"histalp-v1-1y\",                           start       = \"1854-01-01\",                           end         = \"2022-01-01\",                           parameters  = c(\"R01\", \"T01\"),                           station_ids = 23,                           expert      = TRUE) plot(bregenz, col = c(4, 2))"},{"path":"https://retostauffer.github.io/gsdata/reference/gs_temporal_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract/Calculate Temporal Interval — gs_temporal_interval","title":"Extract/Calculate Temporal Interval — gs_temporal_interval","text":"Helper function extract return temporal interval (seconds) different data sets based resource_id identifier. Used estimate number expected values retrieved per-request limit.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_temporal_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract/Calculate Temporal Interval — gs_temporal_interval","text":"","code":"gs_temporal_interval(resource_id)"},{"path":"https://retostauffer.github.io/gsdata/reference/gs_temporal_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract/Calculate Temporal Interval — gs_temporal_interval","text":"resource_id character, name resource_id","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_temporal_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract/Calculate Temporal Interval — gs_temporal_interval","text":"Returns integer vector length input vector resource_id temporal resolution data set seconds NA case string decoded.","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_temporal_interval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract/Calculate Temporal Interval — gs_temporal_interval","text":"Reto Stauffer","code":""},{"path":"https://retostauffer.github.io/gsdata/reference/gs_temporal_interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract/Calculate Temporal Interval — gs_temporal_interval","text":"","code":"gs_temporal_interval(\"test-1d-string\") #> Warning: not able to extract temporal interval from test-1d-string, returning NA. #> [1] NA ds <- gs_datasets() gs_temporal_interval(ds$resource_id) #> [1] 31622400    86400     3600  2678400      600      600      600     3600"},{"path":"https://retostauffer.github.io/gsdata/news/index.html","id":"gsdata-00-3","dir":"Changelog","previous_headings":"","what":"gsdata 0.0-3","title":"gsdata 0.0-3","text":"Reduced limit data requests gs_stationdata() 5e5 Throwing error end <= start gs_stationdata()","code":""},{"path":"https://retostauffer.github.io/gsdata/news/index.html","id":"gsdata-00-2","dir":"Changelog","previous_headings":"","what":"gsdata 0.0-2","title":"gsdata 0.0-2","text":"First working “release” gsdata package (mainly coded personal use; might undergo development). Allows downloading different station data sets. Implemented three main functions gs_datasets(), gs_metadata() `gs_stationdata(). Package documentation main functionality.","code":""}]
