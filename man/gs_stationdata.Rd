% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/station.R
\name{gs_stationdata}
\alias{gs_stationdata}
\title{Downloading Station Data}
\usage{
gs_stationdata(
  mode,
  resource_id,
  parameters = NULL,
  start = NULL,
  end = NULL,
  station_ids,
  expert = FALSE,
  drop = TRUE,
  verbose = FALSE,
  format = NULL,
  limit = 2e+05,
  config = list()
)
}
\arguments{
\item{mode}{character, specify mode of data.}

\item{resource_id}{character, specify resource identifier of data.}

\item{parameters}{character vector to define which parameters to process.}

\item{start, end}{object of class \code{Date}, \code{POSIXt}, or \code{character}.
In case of character in a non-ISO format \code{format} can be used (see below).
Not needed (ignored) when \code{mode = "current"}.}

\item{station_ids}{integer vector with the station IDs to be processed.}

\item{expert}{logical, defaults to \code{FALSE}. If \code{TRUE} the script will not
check if the input arguments are valid. May result in unsuccessful requests
but increases the speed as \code{gs_datasets()} and \code{gs_metadata()}
do not have to be called (two API requests less).}

\item{drop}{logical, if \code{TRUE} parameters and times with no data are removed
before returning the data.}

\item{verbose}{logical, if set \code{TRUE} some more output will be produced.}

\item{format}{\code{NULL} (default) or character string, used if \code{start}/\code{end}
are characters in a specific (non ISO) format.}

\item{limit}{integer, API data request limit. If the request sent by the user
exceeds this limit, the request will be split into batches automatically.
Set to 2e5 as the limit stated on the API documentation (1e6) will not be accepted.}

\item{config}{empty list by default; can be a named list to be fowrarded
to the \code{httr::GET} request if needed.}
}
\value{
If only data for one single station (\code{length(station_ids) == 1}) is requested,
a \code{zoo} object will be returned if data is available. If no data is available,
\code{NULL} will be returned.

When multiple stations are requested a list of \code{zoo} object (or \code{NULL} if no data
is available) is returned. The name of the list corresponds to the station id requested.
}
\description{
Accessing the API endpoint \code{v1/station},
see \url{https://dataset.api.hub.geosphere.at/v1/docs/getting-started.html}.
}
\details{
This function is a convenience function for downloading different
sets of station data from the GeoSphere Austria data hub (formerly ZAMG).
The API may change and additional resources may be added, for details see
\url{https://dataset.api.hub.geosphere.at/v1/docs/user-guide/endpoints.html}.

To see what's available call \code{gs_datasets("station")}.

The API has a limit for the number of elements for one request. The calculation
is based on the number of expecte elements (i.e., number of stations times number
of parameters times number of time steps). This function will pre-calculate the number
of expected elements and split the request into batches along the time dimension - if needed.
}
\examples{
######################################################################
## Latest observations for two tawes stations in Innsbruck.
## Parameters TL (air temperature 2m above ground), TS (air temperature 5cm
## above ground) and RR (amount of rain past 10 minutes).
innsbruck <- gs_stationdata(mode        = "current",
                            resource_id = "tawes-v1-10min",
                            parameters  = c("TL", "TS", "RR"),
                            station_ids = c(11121, 11320),
                            expert      = TRUE)
# Air temp
sapply(innsbruck, function(x) x$TL)
# Precipitation (rain)
sapply(innsbruck, function(x) x$RR)

\dontrun{
######################################################################
## Example for synop data

## Loading meta information
meta <- gs_metadata(mode = "historical", resource_id = "synop-v1-1h")
## For station information check
head(meta$stations)
## For available parameters (for this mode/resource_id) check
head(meta$parameters)

## Getting data over 48 hours for one single station
## Note: If expert = FALSE (default) gs_stationdata()
## will internally call gs_metadata() once more to check
## if the requested station_ids as well as the parameters
## exist for the data set specified (mode/resource_id).
mayrhofen <- gs_stationdata(mode        = "historical",
                            resource_id = "synop-v1-1h",
                            start       = "2020-01-01",
                            end         = "2020-01-03",
                            parameters  = c("T", "Td", "ff"),
                            station_ids = 11330, verbose = TRUE)

library("zoo")
plot(mayrhofen, screen = c(1, 1, 2), col = c(2, 3, 4))

## Getting data over 48 hours for three stations simultanously
## Mayrhofen Tirol, Achenkirch Tirol (no data), and Innsbruck Airport Tirol
x <- gs_stationdata(mode        = "historical",
                    resource_id = "synop-v1-1h",
                    start       = "2020-01-01",
                    end         = "2020-01-03",
                    parameters  = c("T", "Td", "ff"),
                    station_ids = c(11330, 11328, 11120),
                    expert      = TRUE)
plot(x[["11330"]], screen = c(1, 1, 2), col = c(2, 3, 4))
is.null(x[["11328"]])
plot(x[["11120"]], screen = c(1, 1, 2), col = c(2, 3, 4))

######################################################################
## Example for daily climatological records
meta <- gs_metadata("historical", "klima-v1-1d")
achenkirch <- gs_stationdata(mode        = "historical",
                             resource_id = "klima-v1-1d",
                             start       = "2020-06-01",
                             end         = "2022-12-31",
                             parameters  = c("nied", "nied07", "nied19", "sonne"),
                             station_ids = 8807,
                             expert      = TRUE)
head(achenkirch)
plot(achenkirch, type = "h")


######################################################################
## Example for 10min KLIMA data
# meta$parameter contains available parameters,
# meta$stations  available stations
meta <- gs_metadata("historical", "klima-v1-10min")
uibk <-  gs_stationdata(mode        = "historical",
                        resource_id = "klima-v1-10min",
                        start       = "2010-11-01",
                        end         = "2011-02-01",
                        parameters  = c("TL", "FFAM", "FFX"),
                        station_ids = 11803,
                        expert      = TRUE)
plot(uibk,
     screens = c(1, 2, 2),
     col = c(2, 4, 8),
     ylab = c("temperature", "mean wind\nand gusts"))


######################################################################
## Example for 10min TAWES data
## NOTE/WARNING:
##   ! "tawes" is not quality controlled and provides limited
##   ! amount of data. Consider to use the "klima-v1-10min" data set which
##   ! provides long-term historical data for the same stations with the
##   ! same temporal resolution, however, the station IDs and
##   ! parameter names (as well as avilavle parameters) will differ
##   ! (check meta data).
# meta$parameter contains available parameters,
# meta$stations  available stations
meta <- gs_metadata("historical", "tawes-v1-10min")
uibk <- gs_stationdata(mode         = "historical",
                       resource_id  = "tawes-v1-10min",
                       start        = Sys.Date() - 30,
                       end          = Sys.Date(),
                       parameters   = c("TL", "TP", "FFAM", "FFX"),
                       station_ids  = 11320,
                       expert       = TRUE)
plot(uibk,
     screens = c(1, 1, 2, 2),
     col = c(2, 3, 4, 8),
     ylab = c("temperature\nand dewpoint", "mean wind\nand gusts"))


######################################################################
## Example for annual histalp data
gs_metadata("historical", "histalp-v1-1y")
bregenz <- gs_stationdata(mode        = "historical",
                          resource_id = "histalp-v1-1y",
                          start       = "1854-01-01",
                          end         = "2022-01-01",
                          parameters  = c("R01", "T01"),
                          station_ids = 23,
                          expert      = TRUE)
plot(bregenz, col = c(4, 2))
}
}
\author{
Reto Stauffer
}
